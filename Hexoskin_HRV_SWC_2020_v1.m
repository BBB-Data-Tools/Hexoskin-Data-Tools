%% Hexoskin Analysis Tools v1.0
% 
% Scott Coussens
% 
% 2020
% 
% v1.0 - analyse EDA data for Empatica - ?? other details
% v2.0 - first working copy
% v3.0 - to include 1/f removal and HF check
% environment - do not clear - run eats gui to get required varables
% clear all
% close all
% clc

% variables - to be defined in EATs GUI
%[sourceDir, participants, fs, SNS_freqrange] = EATS_gui(edit1, edit2, edit3, edit4) 
%**********************************************************************************************
% Edit these varibles
sourceDir = 'E:\QUALITY_LAB_MANAGEMENT_STRUCTURE\PROJECTS\GSR_ANALYSIS_PAPER_2020\EATs_2020\JimStudy\apathy2020\sourcedata\'
participants = [1 2 3 5 6 7 8 9 10] % participant numbers in an order seperated by space, no zero padding
sessionName = 'rem1' % name of session as string
fs = 4 % EDA raw sampling frequency in Hz
SNS_freqrange = [0.045 0.25] %SNS frequency range in Hz
Tot_freqrange = [0.01 1]
startTrigger = 5 % edit for starting trigger number for data of interest
endTrigger = 6 % edit for ending trigger number for data of interest
tc = 1/fs % time constant is 1/sampling rate for sample calc
windowLength = 5 % number of elements in window to be smoothed
outputFileName = 'EMPATICA_ANALYSIS_TOOLs_OUTPUT_for_EDA_SWC_2020.xlsx'
%***********************************************************************************************
% participant loop
for i = participants(1:length(participants))

    %% Import EDA data from csv file
    % Setup the Import Options and import the data

    opts = delimitedTextImportOptions("NumVariables", 1);

    % Specify range and delimiter
    opts.DataLines = [4, Inf];
    opts.Delimiter = ",";

    % Specify column names and types
    opts.VariableNames = "VarName2";
    opts.VariableTypes = "double";

    % Specify file level properties
    opts.ExtraColumnsRule = "ignore";
    opts.EmptyLineRule = "read";

    % Import the data
    tbl = readtable([sourceDir 'sub_' num2str(i) '\ses_' sessionName '\eda\sub_'  num2str(i) '_ses_' sessionName  '_eda.csv'], opts);

    % Convert to output type
    EDA_Data = tbl.VarName2;

    % Clear temporary variables
    clear opts tbl

    %% Import Tags (triggers)

    % Import data from text file
    % Script for importing data from the following text file:
    %
    %    filename: D:\Jim_EmpaticaStudy_2020\A01F1A\tags.csv
    %
        % Auto-generated by MATLAB on 01-Jun-2020 12:28:33

    % Setup the Import Options and import the data
    opts = delimitedTextImportOptions("NumVariables", 3);

    % Specify range and delimiter
    opts.DataLines = [1, Inf];
    opts.Delimiter = ",";

    % Specify column names and types
    opts.VariableNames = ["VarName3", "Var2", "Var3"];
    opts.SelectedVariableNames = "VarName3";
    opts.VariableTypes = ["double", "string", "string"];

    % Specify file level properties
    opts.ExtraColumnsRule = "ignore";
    opts.EmptyLineRule = "read";

    % Specify variable properties
    opts = setvaropts(opts, ["Var2", "Var3"], "WhitespaceRule", "preserve");
    opts = setvaropts(opts, ["Var2", "Var3"], "EmptyFieldRule", "auto");

    % Import the data
    tbl = readtable([sourceDir 'sub_' num2str(i) '\ses_' sessionName '\tags\sub_'  num2str(i) '_ses_' sessionName  '_tags.csv'], opts);;

    % Convert to output type
    tagsData = tbl.VarName3;

    % Clear temporary variables
    clear opts tbl

    %% Import time data 
    % Import data from text file
    % Script for importing data from the following text file:
    %
    %    filename: D:\Jim_EmpaticaStudy_2020\A01F1A\EDA.csv
    %
    % Auto-generated by MATLAB on 01-Jul-2020 12:36:36

    % Setup the Import Options and import the data
    opts = delimitedTextImportOptions("NumVariables", 1);

    % Specify range and delimiter
    opts.DataLines = [1, 1];
    opts.Delimiter = ",";

    % Specify column names and types
    opts.VariableNames = "VarName1";
    opts.VariableTypes = "double";

    % Specify file level properties
    opts.ExtraColumnsRule = "ignore";
    opts.EmptyLineRule = "read";

    % Import the data
    tbl = readtable([sourceDir 'sub_' num2str(i) '\ses_' sessionName '\eda\sub_'  num2str(i) '_ses_' sessionName  '_eda.csv'], opts);

    %% Convert to output type
    startTime = tbl.VarName1;

    %% Clear temporary variables
    clear opts tbl

    %% Select Data for Processing

    % 5th to 6th marker = Therapy (VR)~ 20mins

    startSec = tagsData(startTrigger)-startTime;
    endSec = tagsData(endTrigger)-startTime;

    startSample = round(startSec/tc)
    endSample = round(endSec/tc)

    EDA_DataForProc = EDA_Data(startSample : endSample)

    %% clean data

    % smooth data using A robust version of 'loess' that assigns lower weight to outliers in the regression. The method assigns zero weight to data outside six mean absolute deviations.
    % EDA_DataSmooth = smooth(EDA_DataForProc,0.1,'rloess');
    % plot(EDA_DataSmooth)
    EDA_DataSmooth = smoothdata(EDA_DataForProc,'movmedian',windowLength)


    %% spectral analysis
     %SNS
    filename = [ sourceDir outputFileName]
    sheet = ['GSR_SNS']
    
    
    % column headers
    colHeaders = { 'ID', 'SNS_AB', 'Total', 'SNS_Norm'}
    rowHeaders = i
    xlrange = ['A1:D1']
    xlswrite(filename,colHeaders,sheet,xlrange)%
    xlrange = ['A' num2str(i+1)]
    xlswrite(filename,rowHeaders,sheet,xlrange)%
    
    
    %record abs GSR data for SNS in excel
    B = bandpower(EDA_DataSmooth,fs,SNS_freqrange) %returns the average power in the frequency range, freqrange, specified as a two-element vector. You must input the sample rate, fs, to return the power in a specified frequency range. bandpower uses a modified periodogram to determine the average power in freqrange.
    xlrange = ['B' num2str(i+1)]
    xlswrite(filename,B,sheet,xlrange)%
    
    %TOTL POWER CALC

    C = bandpower(EDA_DataSmooth,fs,Tot_freqrange) %returns the average power in the frequency range, freqrange, specified as a two-element vector. You must input the sample rate, fs, to return the power in a specified frequency range. bandpower uses a modified periodogram to determine the average power in freqrange.
    xlrange = ['C' num2str(i+1)]
    xlswrite(filename,C,sheet,xlrange)%    B = bandpower(b,fs,freqrangeTot) %returns the average power in the frequency range, freqrange, specified as a two-element vector. You must input the sample rate, fs, to return the power in a specified frequency range. bandpower uses a modified periodogram to determine the average power in freqrange.
    
    
    % normalised power calc
    D = B/C
    xlrange = ['D' num2str(i+1)]
    xlswrite(filename,D,sheet,xlrange)%
    
    



end